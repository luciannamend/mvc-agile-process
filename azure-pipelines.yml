trigger:
- master

pool:
  name: MvcMovieAgentPool
  demands:
    - agent.name -equals Group15Agent

variables:
  solution: 'mvc-agile-process.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  projectName: 'MVC Movie Web App'
  sonarProjectKey: 'GroupProject'
  sonarProjectName: 'GroupProject'

stages:
# BUILD STAGE
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build and Test'
    steps:
    # Install and configure the required .NET SDK version
    - task: UseDotNet@2
      displayName: 'Use .NET 8.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.100'
        installationPath: '$(Agent.ToolsDirectory)/dotnet'

    # Install NuGet tools needed for package restore
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet Tool'
      
    # Restore NuGet packages for the solution
    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        restoreSolution: '$(solution)'
        feedsToUse: 'select'

    # Install SonarScanner for code quality analysis
    - script: |
        dotnet tool update --global dotnet-sonarscanner
      displayName: 'Install SonarScanner for .NET'
      continueOnError: true

    # Initialize SonarQube analysis before build
    - script: |
        dotnet sonarscanner begin /k:"$(sonarProjectKey)" /n:"$(sonarProjectName)" /d:sonar.host.url="http://localhost:9000" /d:sonar.token="$(sonarToken)" /d:sonar.projectBaseDir="$(Build.SourcesDirectory)" /d:sonar.sources="."
      displayName: 'Begin SonarQube Analysis'
      condition: and(succeeded(), ne(variables['sonarToken'], ''))

    # Step 1: Build the project with MSBuild
    - task: MSBuild@1
      displayName: 'Compile project using MSBuild'
      inputs:
        solution: '$(solution)'
        msbuildArchitecture: 'x64'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        msbuildArguments: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(Build.ArtifactStagingDirectory)"'
        clean: true

    # Step 2: Execute unit tests and collect code coverage data
    - task: DotNetCoreCLI@2
      displayName: 'Run tests with code coverage'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --logger:trx'
      continueOnError: true

    # Complete SonarQube analysis after build and tests
    - script: |
        dotnet sonarscanner end /d:sonar.token="$(sonarToken)"
      displayName: 'End SonarQube Analysis'
      condition: and(succeeded(), ne(variables['sonarToken'], ''))

    # Publish build artifacts for deployment stages
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'MvcMovieArtifact'

# DELIVER STAGE - Prepares and releases artifacts
- stage: Deliver
  displayName: 'Deliver Stage'
  dependsOn: Build
  jobs:
  - job: DeliverJob
    displayName: 'Release Artifact'
    steps:
    # Download the build artifacts
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'MvcMovieArtifact'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Build Artifacts'
      
    # Simulate artifact registration to a repository
    - script: |
        echo "Releasing artifact to repository"
        echo "Artifact name: MvcMovieArtifact"
        echo "Artifact version: 1.0.$(Build.BuildId)"
        echo "Artifact location: $(System.ArtifactsDirectory)"
      displayName: 'Release Artifact'

# DEV ENVIRONMENT - First deployment environment
- stage: DeployDev
  displayName: 'Deploy to Dev Environment'
  dependsOn: Deliver
  jobs:
  - job: DeployDev
    displayName: 'Deploy to Dev'
    steps:
    # Download the previously released artifacts
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'MvcMovieArtifact'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifact'
        
    # Extract the application package for Dev environment
    - task: ExtractFiles@1
      displayName: 'Extract files for Dev environment'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/MvcMovieArtifact/*.zip'
        destinationFolder: '$(System.ArtifactsDirectory)/webapp'
        cleanDestinationFolder: true
        overwriteExistingFiles: true
      continueOnError: true
        
    # Start the deployed application in Dev environment
    - script: |
        echo "Launching application in Dev environment"
        echo "Starting web application from: $(System.ArtifactsDirectory)/webapp"
        dir "$(System.ArtifactsDirectory)/webapp"
      displayName: 'Launch Application'

# QA ENVIRONMENT - Quality assurance testing environment
- stage: DeployQA
  displayName: 'Deploy to QA Environment'
  dependsOn: DeployDev
  jobs:
  - job: DeployQA
    displayName: 'Deploy to QA'
    steps:
    # Download the previously released artifacts
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'MvcMovieArtifact'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifact'
        
    # Extract the application package for QA environment
    - task: ExtractFiles@1
      displayName: 'Extract files for QA environment'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/MvcMovieArtifact/*.zip'
        destinationFolder: '$(System.ArtifactsDirectory)/webapp-qa'
        cleanDestinationFolder: true
        overwriteExistingFiles: true
      continueOnError: true
      
    # Verify QA deployment
    - script: |
        echo "QA Deployment completed"
        echo "Application deployed at: $(System.ArtifactsDirectory)/webapp-qa"
        dir "$(System.ArtifactsDirectory)/webapp-qa"
      displayName: 'Verify QA Deployment'

# STAGING ENVIRONMENT - Pre-production environment
- stage: DeployStaging
  displayName: 'Deploy to Staging Environment'
  dependsOn: DeployQA
  jobs:
  - job: DeployStaging
    displayName: 'Deploy to Staging'
    steps:
    # Download the previously released artifacts
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'MvcMovieArtifact'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifact'
        
    # Extract the application package for Staging environment
    - task: ExtractFiles@1
      displayName: 'Extract files for Staging environment'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/MvcMovieArtifact/*.zip'
        destinationFolder: '$(System.ArtifactsDirectory)/webapp-staging'
        cleanDestinationFolder: true
        overwriteExistingFiles: true
      continueOnError: true
      
    # Verify Staging deployment
    - script: |
        echo "Staging Deployment completed"
        echo "Application deployed at: $(System.ArtifactsDirectory)/webapp-staging"
        dir "$(System.ArtifactsDirectory)/webapp-staging"
      displayName: 'Verify Staging Deployment'

# PRODUCTION ENVIRONMENT - Live environment
- stage: DeployProduction
  displayName: 'Deploy to Production Environment'
  dependsOn: DeployStaging
  jobs:
  - job: DeployProduction
    displayName: 'Deploy to Production'
    steps:
    # Download the previously released artifacts
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'MvcMovieArtifact'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Artifact'
        
    # Extract the application package for Production environment
    - task: ExtractFiles@1
      displayName: 'Extract files for Production environment'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/MvcMovieArtifact/*.zip'
        destinationFolder: '$(System.ArtifactsDirectory)/webapp-prod'
        cleanDestinationFolder: true
        overwriteExistingFiles: true
      continueOnError: true
      
    # Verify Production deployment
    - script: |
        echo "Production Deployment completed"
        echo "Application deployed at: $(System.ArtifactsDirectory)/webapp-prod"
        dir "$(System.ArtifactsDirectory)/webapp-prod"
      displayName: 'Verify Production Deployment'
